version: '3.8'
services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-1      
    ports:
      - 12181:12181
    environment:
      ZOOKEEPER_CLIENT_PORT: 12181      
      ZOOKEEPER_TICK_TIME: 2000

  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-1  
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1 
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://localhost:9092       
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    depends_on: 
      - zookeeper-1

  kafka-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-2      
    ports:
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 2 
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:29093,EXTERNAL://localhost:9093       
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    depends_on: 
      - zookeeper-1
  
  kafka-3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-3      
    ports:
      - 9094:9094
    environment:
      KAFKA_BROKER_ID: 3 
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:39094,EXTERNAL://localhost:9094       
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    depends_on: 
      - zookeeper-1
       
# Zookeeper 설정 정보        
# ZOOKEEPER_SERVER_ID: 1
# ZOOKEEPER_CLIENT_PORT: 12181  #클라이언트가 주키퍼 접속을 위한 포트
# ZOOKEEPER_TICK_TIME: 2000  #Tick 단위시간
# ZOOKEEPER_INIT_LIMIT: 5  #팔로워가 리더와 연결시도를 하는 최대 횟수
# ZOOKEEPER_SYNC_LIMIT: 2  #팔로워가 리더와 연결된 후, 앙상블 안에서 리더와 동기화되기 위한 제한 수.
# ZOOKEEPER_SERVERS: localhost:12888:13888 #localhost:22888:23888;localhost:32888:33888 #12888은 동기화를 위한 포트, 13888은 클러스터 구성 시, leader를 선출하기 위한 포트        

# Kafka 설정 정보
# KAFKA_BROKER_ID: 1  #broker.id 에 설정되는 정수값(식별자).
# KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181  #,cp-zookeeper-2:22181,cp-zookeeper-3:32181 #브로커의 메타데이터를 주키퍼에 저장하기 위한 위치. 호스트에 이름을 추가하면 호스트명:포트로 작성할 수 있고, 주키퍼 앙상블시에는 모든 값을 적어줌.
# KAFKA_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://localhost:9092  # 리스너 들의 목록이고, 호스트/ip 로 구성한다. 해당 옵션을 사용하지 않으면 모든 인터페이스에서 수신 할 수 있다. 기본값. 0.0.0.0
# KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://localhost:9092  # PLAINTEXT://{public ip혹은 hostname}(consumer나 producer에서 접속할 ip혹은 도메인):9092 kafka 브로커를 가리키는 사용 가능 주소로 초기연결시에 클라이언트에 전달되는 메타 데이터
# KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL  #브로커 간 통신에 사용할 리스너를 정의. KAFKA_ADVERTISED_LISTENERS 가 여러개인 경우 꼭 사용해야함
# KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT  # the listener name is not a security protocol, listener.security.protocol.map must also be set. PLAINTEXT는 리스너가 암호화되지 않은 것을 말함.
# KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3  # default 3. cluster 내 broker에 토픽이 분산되어 저장된다. 싱글노드에서 테스트 할 때는 1로 설정해준다.
# KAFKA_NUM_PARTITIONS: 3  #토픽이 몇 개의 파티션으로 생성되는지. 기본 값은 1개이다. 토픽의 파티션 개수는 증가만 가능하고 감소될 수 없다. (클러스터의 브로커수와 그의 배수로 해주는 것이 권장된다.)        
      
# kafka shell 접속
# docker exec -it kafka-1 bash

# kafka topic 조회
# kafka-topics --list --bootstrap-server kafka-1:19092,kafka-2:29093,kafka-3:39094
# kafka-topics --list --bootstrap-server kafka-1:19092
# kafka-topics --list --bootstrap-server kafka-2:29093
# kafka-topics --list --bootstrap-server kafka-3:39094

# kafka topic 생성
# kafka-topics --create --bootstrap-server kafka-1:19092,kafka-2:29093,kafka-3:39094 --replication-factor 1 --partitions 1 --topic topic-sample
# kafka-topics --create --bootstrap-server kafka-1:19092 --replication-factor 1 --partitions 1 --topic topic-sample-1
# kafka-topics --create --bootstrap-server kafka-2:29093 --replication-factor 1 --partitions 1 --topic topic-sample-2
# kafka-topics --create --bootstrap-server kafka-3:39094 --replication-factor 1 --partitions 1 --topic topic-sample-3

# kafka topic 삭제
# kafka-topics --delete --bootstrap-server kafka-1:19092,kafka-2:29093,kafka-3:39094 --topic topic-sample,topic-sample-1,topic-sample-2,topic-sample-3